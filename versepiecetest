local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Zenith Hub | Verse Piece",
   LoadingTitle = "üî´ Verse Piece üí•",
   LoadingSubtitle = "by Marx",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Zenith Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "zenithhub", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "",
      Subtitle = "",
      Note = "",
      FileName = "", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed Zenith Hub",
   Content = "Zenith Hub",
   Duration = 3,
   Image = 130715353763190,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Zenith Hub!",
         Callback = function()
         print("The user tapped Zenith Hub")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Kaitun",
   Callback = function()
       --Toggles the infinite jump between on or off on every script run
_G.autoFarm = not _G.autoFarm

if _G.autoFarm== nil then
	--Ensures this only runs once to save resources
	_G.autoFarm = true
	
	--Notifies readiness
	game.StarterGui:SetCore("SendNotification", {Title="Zenith Hub"; Text="Kaitun"; Duration=5;})
    local VirtualInputManager = Instance.new("VirtualInputManager")
    local LocalPlayer = game.Players.LocalPlayer
    local isAutoFarming = false
    
    -- Function to simulate mouse clicks
    local function autoClick()
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0) -- Mouse down
        wait(0.1) -- Adjust this wait time for click speed
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0) -- Mouse up
    end
    
    -- Function to toggle auto-farming
    local function autoFarm()
        if isAutoFarming then
            print("Auto Farm is now OFF")
            isAutoFarming = false
        else
            print("Auto Farm is now ON")
            isAutoFarming = true
            while isAutoFarming do
                autoClick()
                wait(0.5) -- Adjust this wait time for click frequency
            end
        end
    end
    
    -- Function to teleport behind the monster
    local function teleportBehindMonster(monsterCFrame)
        local playerCFrame = monsterCFrame:ToObjectSpace(LocalPlayer.Character.HumanoidRootPart.CFrame)
        local behindMonsterCFrame = playerCFrame * CFrame.new(0, 0, -5) -- Adjust the -5 for distance
        LocalPlayer.Character.HumanoidRootPart.CFrame = monsterCFrame * behindMonsterCFrame
    end
    
    -- Example monster's CFrame (replace with the actual monster's position)
    local monsterCFrame = CFrame.new(1045.962646484375, 27.00250816345215, 1560.8203125) -- Example for "Bandit [Lv.5]"
    
    -- Teleport behind the monster initially
    teleportBehindMonster(monsterCFrame)
    
    -- Start auto-farming after teleporting
    autoFarm()
    
    -- Use RunService.Heartbeat to constantly update the player's position
    local heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if isAutoFarming then
            teleportBehindMonster(monsterCFrame)
        end
    end)
    
    -- Disconnect the Heartbeat connection when auto-farming is stopped
    autoFarmButton.MouseButton1Click:Connect(function()
        if not isAutoFarming then
            heartbeatConnection:Disconnect()
        end
    end)

local Dropdown = MainTab:Quest({
   Name = "Select Area",
   Options = {"Starter World","Pirate Island","Pineapple Paradise"},
   CurrentOption = {"Starter World"},
   MultipleOptions = false,
   Flag = "dropdownarea", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
        print(Option)
   end,
})
